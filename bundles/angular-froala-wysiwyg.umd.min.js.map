{"version":3,"sources":["ng://angular-froala-wysiwyg/editor/editor.directive.ts","ng://angular-froala-wysiwyg/editor/editor.module.ts","ng://angular-froala-wysiwyg/view/view.directive.ts","ng://angular-froala-wysiwyg/view/view.module.ts","ng://angular-froala-wysiwyg/fe-root.module.ts"],"names":["FroalaEditorDirective","el","zone","this","_opts","immediateAngularModelUpdate","angularIgnoreAttrs","SPECIAL_TAGS","INNER_HTML_ATTR","_hasSpecialTag","_editorInitialized","_oldModel","initializeOverridden","onChange","_","onTouched","froalaModelChange","EventEmitter","froalaInit","element","nativeElement","indexOf","tagName","toLowerCase","_element","prototype","writeValue","content","updateEditor","registerOnChange","fn","registerOnTouched","Object","defineProperty","opts","JSON","stringify","_model","setContent","_editor","html","set","innerHTML","updateModel","_this","run","modelContent","attrs","attributes","reduce","result","attr","name","assign","_a","value","returnedHtml","get","emit","registerEvent","eventName","callback","events","initListeners","self","on","setTimeout","createEditor","runOutsideAngular","initialized","existingInitCallback","call","FroalaEditor","setHtml","undo","reset","saveStep","firstTime","tags","hasOwnProperty","setAttribute","destroyEditor","destroy","getEditor","generateManualController","controls","initialize","bind","ngAfterViewInit","observers","length","ngOnDestroy","setDisabledState","isDisabled","Directive","args","selector","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","NgZone","Input","Output","FroalaEditorModule","forRoot","ngModule","NgModule","declarations","exports","FroalaViewDirective","renderer","addClass","Renderer2","FroalaViewModule","MODULES","FERootModule","imports"],"mappings":"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","sourcesContent":["import { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { Directive, ElementRef, EventEmitter, forwardRef, Input, NgZone, Output } from '@angular/core';\n\nimport FroalaEditor from 'froala-editor';\n\n@Directive({\n  selector: '[froalaEditor]',\n  exportAs: 'froalaEditor',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FroalaEditorDirective),\n      multi: true\n    }\n  ]\n})\nexport class FroalaEditorDirective implements ControlValueAccessor {\n\n  // editor options\n  private _opts: any = {\n    immediateAngularModelUpdate: false,\n    angularIgnoreAttrs: null\n  };\n\n  private _element: any;\n\n  private SPECIAL_TAGS: string[] = ['img', 'button', 'input', 'a'];\n  private INNER_HTML_ATTR: string = 'innerHTML';\n  private _hasSpecialTag: boolean = false;\n\n  // editor element\n  private _editor: any;\n\n  // initial editor content\n  private _model: string;\n\n  private _editorInitialized: boolean = false;\n\n  private _oldModel: string = null;\n\n  private initializeOverridden = false;\n\n  constructor(el: ElementRef, private zone: NgZone) {\n\n    let element: any = el.nativeElement;\n\n    // check if the element is a special tag\n    if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\n      this._hasSpecialTag = true;\n    }\n    this._element = element;\n\n    this.zone = zone;\n  }\n\n  // Begin ControlValueAccesor methods.\n  onChange = (_) => {\n  };\n  onTouched = () => {\n  };\n\n  // Form model content changed.\n  writeValue(content: any): void {\n    this.updateEditor(content);\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // End ControlValueAccesor methods.\n\n  // froalaEditor directive as input: store the editor options\n  @Input() set froalaEditor(opts: any) {\n    this._opts = opts || this._opts;\n  }\n\n  // froalaModel directive as input: store initial editor content\n  @Input() set froalaModel(content: any) {\n    this.updateEditor(content);\n  }\n\n  // Update editor with model contents.\n  private updateEditor(content: any) {\n    if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\n      return;\n    }\n\n    if (!this._hasSpecialTag) {\n      this._oldModel = content;\n    } else {\n      this._model = content;\n    }\n\n    if (this._editorInitialized) {\n      if (!this._hasSpecialTag) {\n        this._editor.html.set(content);\n      } else {\n        this.setContent();\n      }\n    } else {\n      if (!this._hasSpecialTag) {\n        this._element.innerHTML = content || '';\n      } else {\n        this.setContent();\n      }\n    }\n  }\n\n  // froalaModel directive as output: update model if editor contentChanged\n  @Output() froalaModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n  // froalaInit directive as output: send manual editor initialization\n  @Output() froalaInit: EventEmitter<Object> = new EventEmitter<Object>();\n\n  // update model if editor contentChanged\n  private updateModel() {\n    this.zone.run(() => {\n\n      let modelContent: any = null;\n\n      if (this._hasSpecialTag) {\n        const attrs = this._element.attributes.reduce((result, attr) => {\n          if (this._opts.angularIgnoreAttrs && this._opts.angularIgnoreAttrs.indexOf(attr.name) !== -1) {\n            return result;\n          }\n          return Object.assign(result, {\n            [attr.name]: attr.value\n          });\n        }, {});\n\n        if (this._element.innerHTML) {\n          attrs[this.INNER_HTML_ATTR] = this._element.innerHTML;\n        }\n\n        modelContent = attrs;\n      } else {\n\n        let returnedHtml: any = this._editor.html.get();\n        if (typeof returnedHtml === 'string') {\n          modelContent = returnedHtml;\n        }\n      }\n      if (this._oldModel !== modelContent) {\n        this._oldModel = modelContent;\n\n        // Update froalaModel.\n        this.froalaModelChange.emit(modelContent);\n\n        // Update form model.\n        this.onChange(modelContent);\n      }\n\n    })\n  }\n\n  private registerEvent(eventName, callback) {\n    if (!eventName || !callback) {\n      return;\n    }\n\n    if (!this._opts.events) {\n      this._opts.events = {};\n    }\n\n    this._opts.events[eventName] = callback;\n  }\n\n  private initListeners() {\n    let self = this;\n    // Check if we have events on the editor.\n    if (this._editor.events) {\n      // bind contentChange and keyup event to froalaModel\n      this._editor.events.on('contentChanged', function () {\n        setTimeout(function () {\n          self.updateModel();\n        }, 0);\n      });\n      this._editor.events.on('mousedown', function () {\n        setTimeout(function () {\n          self.onTouched();\n        }, 0);\n      });\n\n      if (this._opts.immediateAngularModelUpdate) {\n        this._editor.events.on('keyup', function () {\n          setTimeout(function () {\n            self.updateModel();\n          }, 0);\n        });\n      }\n    }\n\n    this._editorInitialized = true;\n  }\n\n  private createEditor() {\n    if (this._editorInitialized) {\n      return;\n    }\n\n    this.setContent(true);\n\n    // init editor\n    this.zone.runOutsideAngular(() => {\n      // Add listeners on initialized event.\n      if (!this._opts.events) this._opts.events = {};\n\n      // Register initialized event.\n      this.registerEvent('initialized', this._opts.events && this._opts.events.initialized);\n      const existingInitCallback = this._opts.events.initialized;\n      // Default initialized event.\n      if (!this._opts.events.initialized || !this.initializeOverridden) {\n        this._opts.events.initialized = () => {\n          this.initListeners();\n          existingInitCallback && existingInitCallback.call(this._editor, this);\n        };\n        this.initializeOverridden = true;\n      }\n\n      // Initialize the Froala Editor.\n      this._editor = new FroalaEditor(\n        this._element,\n        this._opts\n      );\n    });\n  }\n\n  private setHtml() {\n    this._editor.html.set(this._model || \"\");\n\n    // This will reset the undo stack everytime the model changes externally. Can we fix this?\n    this._editor.undo.reset();\n    this._editor.undo.saveStep();\n  }\n\n  private setContent(firstTime = false) {\n    let self = this;\n\n    // Set initial content\n    if (this._model || this._model == '') {\n      this._oldModel = this._model;\n      if (this._hasSpecialTag) {\n\n        let tags: Object = this._model;\n\n        // add tags on element\n        if (tags) {\n\n          for (let attr in tags) {\n            if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\n              this._element.setAttribute(attr, tags[attr]);\n            }\n          }\n\n          if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\n            this._element.innerHTML = tags[this.INNER_HTML_ATTR];\n          }\n        }\n      } else {\n        if (firstTime) {\n          this.registerEvent('initialized', function () {\n            self.setHtml();\n          });\n        } else {\n          self.setHtml();\n        }\n      }\n    }\n  }\n\n  private destroyEditor() {\n    if (this._editorInitialized) {\n      this._editor.destroy();\n      this._editorInitialized = false;\n    }\n  }\n\n  private getEditor() {\n    if (this._element) {\n      return this._editor;\n    }\n\n    return null;\n  }\n\n  // send manual editor initialization\n  private generateManualController() {\n    let controls = {\n      initialize: this.createEditor.bind(this),\n      destroy: this.destroyEditor.bind(this),\n      getEditor: this.getEditor.bind(this),\n    };\n    this.froalaInit.emit(controls);\n  }\n\n  // TODO not sure if ngOnInit is executed after @inputs\n  ngAfterViewInit() {\n    // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\n    if (!this.froalaInit.observers.length) {\n      this.createEditor();\n    } else {\n      this.generateManualController();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyEditor();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { FroalaEditorDirective } from './editor.directive';\n\n@NgModule({\n  declarations: [FroalaEditorDirective],\n  exports: [FroalaEditorDirective]\n})\n\nexport class FroalaEditorModule {\n  public static forRoot(): ModuleWithProviders {\n    return {ngModule: FroalaEditorModule, providers: []};\n  }\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[froalaView]'\n})\nexport class FroalaViewDirective {\n\n  private _element: HTMLElement;\n  private _content: any;\n\n  constructor(private renderer: Renderer2, element: ElementRef) {\n    this._element = element.nativeElement;\n  }\n\n  // update content model as it comes\n  @Input() set froalaView(content: string) {\n    this._element.innerHTML = content;\n  }\n\n  ngAfterViewInit() {\n    this.renderer.addClass(this._element, \"fr-view\");\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { FroalaViewDirective } from './view.directive';\n\n@NgModule({\n  declarations: [FroalaViewDirective],\n  exports: [FroalaViewDirective]\n})\nexport class FroalaViewModule {\n  public static forRoot(): ModuleWithProviders {\n    return {ngModule: FroalaViewModule, providers: []};\n  }\n}\n","import { FroalaEditorModule } from './editor/editor.module';\nimport { FroalaViewModule } from './view/view.module';\nimport { NgModule } from '@angular/core';\n\nconst MODULES = [\n  FroalaEditorModule,\n  FroalaViewModule\n]\n\n@NgModule({\n  imports: [\n    FroalaEditorModule.forRoot(),\n    FroalaViewModule.forRoot()\n  ],\n  exports: MODULES\n})\nexport class FERootModule {}\n"]}