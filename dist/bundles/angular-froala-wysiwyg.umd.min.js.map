{"version":3,"sources":["ng://angular-froala-wysiwyg/editor/editor.directive.ts","ng://angular-froala-wysiwyg/editor/editor.module.ts","ng://angular-froala-wysiwyg/view/view.directive.ts","ng://angular-froala-wysiwyg/view/view.module.ts","ng://angular-froala-wysiwyg/index.ts"],"names":["FroalaEditorDirective","el","zone","this","_opts","immediateAngularModelUpdate","angularIgnoreAttrs","SPECIAL_TAGS","INNER_HTML_ATTR","_hasSpecialTag","_editorInitialized","_oldModel","onChange","_","onTouched","froalaModelChange","EventEmitter","froalaInit","element","nativeElement","indexOf","tagName","toLowerCase","_element","prototype","writeValue","content","updateEditor","registerOnChange","fn","registerOnTouched","Object","defineProperty","opts","JSON","stringify","_model","setContent","_editor","html","set","innerHTML","updateModel","_this","run","modelContent","attributeNodes","attributes","attrs","i","length","attrName","name","value","returnedHtml","get","emit","registerEvent","eventName","callback","events","initListeners","self","on","setTimeout","createEditor","runOutsideAngular","initialized","existingInitCallback","overridden","call","FroalaEditor","setHtml","undo","reset","saveStep","firstTime","tags","attr","hasOwnProperty","setAttribute","destroyEditor","destroy","getEditor","generateManualController","controls","initialize","bind","ngAfterViewInit","observers","ngOnDestroy","Directive","args","selector","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","NgZone","Input","Output","FroalaEditorModule","forRoot","ngModule","NgModule","declarations","exports","FroalaViewDirective","renderer","setElementClass","Renderer","FroalaViewModule","MODULES","FERootModule","imports"],"mappings":"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","sourcesContent":["import { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, Optional, Output, Renderer, forwardRef } from '@angular/core';\n\nimport FroalaEditor from 'froala-editor';\n\n@Directive({\n  selector: '[froalaEditor]',\n  exportAs: 'froalaEditor',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR, useExisting:\n      forwardRef(() => FroalaEditorDirective),\n    multi: true\n  }]\n})\nexport class FroalaEditorDirective implements ControlValueAccessor {\n\n  // editor options\n  private _opts: any = {\n    immediateAngularModelUpdate: false,\n    angularIgnoreAttrs: null\n  };\n\n  private _element: any;\n\n  private SPECIAL_TAGS: string[] = ['img', 'button', 'input', 'a'];\n  private INNER_HTML_ATTR: string = 'innerHTML';\n  private _hasSpecialTag: boolean = false;\n\n  // editor element\n  private _editor: any;\n\n  // initial editor content\n  private _model: string;\n\n  private _editorInitialized: boolean = false;\n\n  private _oldModel: string = null;\n\n  constructor(el: ElementRef, private zone: NgZone) {\n\n    let element: any = el.nativeElement;\n\n    // check if the element is a special tag\n    if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\n      this._hasSpecialTag = true;\n    }\n    this._element = element;\n\n    this.zone = zone;\n  }\n\n  // Begin ControlValueAccesor methods.\n  onChange = (_) => { };\n  onTouched = () => { };\n\n  // Form model content changed.\n  writeValue(content: any): void {\n    this.updateEditor(content);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n  // End ControlValueAccesor methods.\n\n  // froalaEditor directive as input: store the editor options\n  @Input() set froalaEditor(opts: any) {\n    this._opts = opts || this._opts;\n  }\n\n  // froalaModel directive as input: store initial editor content\n  @Input() set froalaModel(content: any) {\n    this.updateEditor(content);\n  }\n\n  // Update editor with model contents.\n  private updateEditor(content: any) {\n    if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\n      return;\n    }\n\n    if (!this._hasSpecialTag) {\n      this._oldModel = content;\n    }\n    else {\n      this._model = content;\n    }\n\n    if (this._editorInitialized) {\n      if (!this._hasSpecialTag) {\n        this._editor.html.set(content);\n      }\n      else {\n        this.setContent();\n      }\n    }\n    else {\n      if (!this._hasSpecialTag) {\n        this._element.innerHTML = content || '';\n      }\n      else {\n        this.setContent();\n      }\n    }\n  }\n\n  // froalaModel directive as output: update model if editor contentChanged\n  @Output() froalaModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n  // froalaInit directive as output: send manual editor initialization\n  @Output() froalaInit: EventEmitter<Object> = new EventEmitter<Object>();\n\n  // update model if editor contentChanged\n  private updateModel() {\n    this.zone.run(() => {\n\n      let modelContent: any = null;\n\n      if (this._hasSpecialTag) {\n\n        let attributeNodes = this._element.attributes;\n        let attrs = {};\n\n        for (let i = 0; i < attributeNodes.length; i++) {\n\n          let attrName = attributeNodes[i].name;\n          if (this._opts.angularIgnoreAttrs && this._opts.angularIgnoreAttrs.indexOf(attrName) != -1) {\n            continue;\n          }\n\n          attrs[attrName] = attributeNodes[i].value;\n        }\n\n        if (this._element.innerHTML) {\n          attrs[this.INNER_HTML_ATTR] = this._element.innerHTML;\n        }\n\n        modelContent = attrs;\n      } else {\n\n        let returnedHtml: any = this._editor.html.get();\n        if (typeof returnedHtml === 'string') {\n          modelContent = returnedHtml;\n        }\n      }\n      if (this._oldModel !== modelContent) {\n        this._oldModel = modelContent;\n\n        // Update froalaModel.\n        this.froalaModelChange.emit(modelContent);\n\n        // Update form model.\n        this.onChange(modelContent);\n      }\n\n    })\n  }\n\n  private registerEvent(eventName, callback) {\n\n    if (!eventName || !callback) {\n      return;\n    }\n\n    if (!this._opts.events) {\n      this._opts.events = {};\n    }\n\n    this._opts.events[eventName] = callback;\n  }\n\n  private initListeners() {\n    let self = this;\n    // Check if we have events on the editor.\n    if (this._editor.events) {\n      // bind contentChange and keyup event to froalaModel\n      this._editor.events.on('contentChanged', function () {\n        setTimeout(function () {\n          self.updateModel();\n        }, 0);\n      });\n      this._editor.events.on('mousedown', function () {\n        setTimeout(function () {\n          self.onTouched();\n        }, 0);\n      });\n\n      if (this._opts.immediateAngularModelUpdate) {\n        this._editor.events.on('keyup', function () {\n          setTimeout(function () {\n            self.updateModel();\n          }, 0);\n        });\n      }\n    }\n\n    this._editorInitialized = true;\n  }\n\n  private createEditor() {\n    if (this._editorInitialized) {\n      return;\n    }\n\n    this.setContent(true);\n\n    // init editor\n    this.zone.runOutsideAngular(() => {\n      // Add listeners on initialized event.\n      if (!this._opts.events) this._opts.events = {}\n\n      // Register initialized event.\n      this.registerEvent('initialized', this._opts.events && this._opts.events.initialized);\n      const existingInitCallback = this._opts.events.initialized;\n      // Default initialized event.\n      if (!this._opts.events.initialized || !this._opts.events.initialized.overridden) {\n        this._opts.events.initialized = () => {\n          this.initListeners();\n          existingInitCallback && existingInitCallback.call(this._editor, this);\n        };\n        this._opts.events.initialized.overridden = true;\n      }\n\n      // Initialize the Froala Editor.\n      this._editor = new FroalaEditor(\n        this._element,\n        this._opts\n      );\n    });\n  }\n\n  private setHtml() {\n    this._editor.html.set(this._model || \"\");\n\n    // This will reset the undo stack everytime the model changes externally. Can we fix this?\n    this._editor.undo.reset();\n    this._editor.undo.saveStep();\n  }\n\n  private setContent(firstTime = false) {\n    let self = this;\n\n    // Set initial content\n    if (this._model || this._model == '') {\n      this._oldModel = this._model;\n      if (this._hasSpecialTag) {\n\n        let tags: Object = this._model;\n\n        // add tags on element\n        if (tags) {\n\n          for (let attr in tags) {\n            if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\n              this._element.setAttribute(attr, tags[attr]);\n            }\n          }\n\n          if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\n            this._element.innerHTML = tags[this.INNER_HTML_ATTR];\n          }\n        }\n      } else {\n        if (firstTime) {\n          this.registerEvent('initialized', function () {\n            self.setHtml();\n          });\n        } else {\n          self.setHtml();\n        }\n      }\n    }\n  }\n\n  private destroyEditor() {\n    if (this._editorInitialized) {\n      this._editor.destroy();\n      this._editorInitialized = false;\n    }\n  }\n\n  private getEditor() {\n    if (this._element) {\n      return this._editor;\n    }\n\n    return null;\n  }\n\n  // send manual editor initialization\n  private generateManualController() {\n    let controls = {\n      initialize: this.createEditor.bind(this),\n      destroy: this.destroyEditor.bind(this),\n      getEditor: this.getEditor.bind(this),\n    };\n    this.froalaInit.emit(controls);\n  }\n\n  // TODO not sure if ngOnInit is executed after @inputs\n  ngAfterViewInit() {\n    // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\n    if (!this.froalaInit.observers.length) {\n      this.createEditor();\n    } else {\n      this.generateManualController();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyEditor();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { FroalaEditorDirective } from './editor.directive';\n\n@NgModule({\n  declarations: [FroalaEditorDirective],\n  exports: [FroalaEditorDirective]\n})\n\nexport class FroalaEditorModule {\n  public static forRoot(): ModuleWithProviders {\n    return {ngModule: FroalaEditorModule, providers: []};\n  }\n}\n","import { Directive, ElementRef, Renderer, Input, Output, Optional, EventEmitter } from '@angular/core';\n\n@Directive({\n  selector: '[froalaView]'\n})\nexport class FroalaViewDirective {\n\n  private _element: HTMLElement;\n  private _content: any;\n\n  constructor(private renderer: Renderer, element: ElementRef) {\n    this._element = element.nativeElement;\n  }\n\n  // update content model as it comes\n  @Input() set froalaView(content: string){\n    this._element.innerHTML = content;\n  }\n\n  ngAfterViewInit() {\n    this.renderer.setElementClass(this._element, \"fr-view\", true);\n  }\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { FroalaViewDirective } from './view.directive';\n\n@NgModule({\n  declarations: [FroalaViewDirective],\n  exports: [FroalaViewDirective]\n})\nexport class FroalaViewModule {\n  public static forRoot(): ModuleWithProviders {\n    return {ngModule: FroalaViewModule, providers: []};\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport {FroalaEditorModule} from './editor';\nimport {FroalaViewModule} from './view';\n\nexport {\n  FroalaEditorDirective,\n  FroalaEditorModule\n} from './editor';\n\nexport {\n  FroalaViewDirective,\n  FroalaViewModule\n} from './view';\n\nconst MODULES = [\n  FroalaEditorModule,\n  FroalaViewModule\n]\n\n@NgModule({\n imports: [\n   FroalaEditorModule.forRoot(),\n   FroalaViewModule.forRoot()\n ],\n exports: MODULES\n})\nexport class FERootModule {\n\n}"]}